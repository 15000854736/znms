<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="info.zznet.znms.base.dao.SmRoleMapper" >
  <resultMap id="BaseResultMap" type="info.zznet.znms.base.entity.SmRole" >
    <id column="ROLE_UUID" property="roleUuid" jdbcType="VARCHAR" />
    <result column="ROLE_NAME" property="roleName" jdbcType="VARCHAR" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
    <result column="CREATE_ADMIN" property="createAdmin" jdbcType="VARCHAR" />
    <result column="UPDATE_TIME" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="UPDATE_ADMIN" property="updateAdmin" jdbcType="VARCHAR" />
    <result column="STATUS" property="status" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    ROLE_UUID, ROLE_NAME, CREATE_TIME, CREATE_ADMIN, UPDATE_TIME, UPDATE_ADMIN, STATUS
  </sql>
  <select id="findByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    SELECT 
    <include refid="Base_Column_List" />
    FROM SM_ROLE
    WHERE ROLE_UUID = #{roleUuid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    DELETE FROM SM_ROLE
    WHERE ROLE_UUID = #{roleUuid,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="info.zznet.znms.base.entity.SmRole" >
    INSERT INTO SM_ROLE (ROLE_UUID, ROLE_NAME, CREATE_TIME, 
      CREATE_ADMIN, UPDATE_TIME, UPDATE_ADMIN, 
      STATUS)
    VALUES (#{roleUuid,jdbcType=VARCHAR}, #{roleName,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{createAdmin,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, #{updateAdmin,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="info.zznet.znms.base.entity.SmRole" >
    INSERT INTO SM_ROLE
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="roleUuid != null" >
        ROLE_UUID,
      </if>
      <if test="roleName != null" >
        ROLE_NAME,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
      <if test="createAdmin != null" >
        CREATE_ADMIN,
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME,
      </if>
      <if test="updateAdmin != null" >
        UPDATE_ADMIN,
      </if>
      <if test="status != null" >
        STATUS,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="roleUuid != null" >
        #{roleUuid,jdbcType=VARCHAR},
      </if>
      <if test="roleName != null" >
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createAdmin != null" >
        #{createAdmin,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateAdmin != null" >
        #{updateAdmin,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="info.zznet.znms.base.entity.SmRole" >
    UPDATE SM_ROLE
    <set >
      <if test="roleName != null" >
        ROLE_NAME = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createAdmin != null" >
        CREATE_ADMIN = #{createAdmin,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null" >
        UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateAdmin != null" >
        UPDATE_ADMIN = #{updateAdmin,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        STATUS = #{status,jdbcType=INTEGER},
      </if>
    </set>
    WHERE ROLE_UUID = #{roleUuid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="info.zznet.znms.base.entity.SmRole" >
    UPDATE SM_ROLE
    SET ROLE_NAME = #{roleName,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      CREATE_ADMIN = #{createAdmin,jdbcType=VARCHAR},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP},
      UPDATE_ADMIN = #{updateAdmin,jdbcType=VARCHAR},
      STATUS = #{status,jdbcType=INTEGER}
    WHERE ROLE_UUID = #{roleUuid,jdbcType=VARCHAR}
  </update>
  
  <select id="findAll" resultMap="BaseResultMap">
  SELECT 
  <include refid="Base_Column_List" />
    FROM SM_ROLE
    ORDER BY ROLE_NAME
  </select>
  
  <delete id="deleteByUuidList" parameterType="java.util.List">
	delete from SM_ROLE WHERE ROLE_UUID IN
	<foreach collection="list" index="index" item="id" open="("
		separator="," close=")">
		#{id}
	</foreach>
</delete>
  
  <select id="findCntByRoleName" resultType="java.lang.Integer">
	select count(ROLE_UUID)
	from SM_ROLE
	where ROLE_NAME = #{roleName,jdbcType=VARCHAR}
</select>

<select id="findAdminCntByRole" resultType="java.lang.Integer">
	select count(ADMIN_UUID) 
	from SM_ADMIN
	where ROLE_UUID = #{roleUuid,jdbcType=VARCHAR}
</select>

<select id="findPageList" resultMap="BaseResultMap" parameterType="info.zznet.znms.web.module.common.page.Pager">
	SELECT 
    <include refid="Base_Column_List" />
    FROM SM_ROLE
    <where> 
   	 <if test="condition != null">
		<foreach collection="condition" item="item">
	  		<if test="item.value != null and item.value !=''">
	  			<if test="item.key == 'roleName'">
	  				<![CDATA[and ROLE_NAME like CONCAT('%',#{item.value},'%')]]>  
	  			</if>
	  		</if>
  		</foreach>
	</if>
  	</where> 
  		limit #{pager.limit} offset #{pager.offset}
	</select>
	<select id="getCount" resultType="java.lang.Long">
		SELECT 
    count(1)
    FROM SM_ROLE
    <where> 
    	<if test="condition != null">
		<foreach collection="condition" item="item">
	  		<if test="item.value != null and item.value !=''">
	  			<if test="item.key == 'roleName'">
	  				<![CDATA[and ROLE_NAME like CONCAT('%',#{item.value},'%')]]>  
	  			</if>
	  		</if>
  		</foreach>
	</if>
  	</where> 
	</select>
</mapper>