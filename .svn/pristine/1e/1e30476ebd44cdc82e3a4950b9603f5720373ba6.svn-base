/**
 * 
 */
package info.zznet.znms.web.module.system.service.impl;

import info.zznet.znms.base.constants.SystemConstants;
import info.zznet.znms.base.dao.ApMapMapper;
import info.zznet.znms.base.dao.SystemOptionMapper;
import info.zznet.znms.base.entity.ApMap;
import info.zznet.znms.base.entity.SystemOption;
import info.zznet.znms.base.util.UUIDGenerator;
import info.zznet.znms.web.WebRuntimeData;
import info.zznet.znms.web.module.common.constants.SystemOptionEnums;
import info.zznet.znms.web.module.common.service.impl.BaseServiceImpl;
import info.zznet.znms.web.module.system.bean.SystemOptionBean;
import info.zznet.znms.web.module.system.service.SystemOptionService;

import java.io.File;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

/**
 * @author dell001
 *
 */
@Service("systemOptionService")
@Transactional(propagation = Propagation.REQUIRED,rollbackFor=Exception.class)
public class SystemOptionServiceImpl extends BaseServiceImpl implements SystemOptionService{

	@Autowired
	private SystemOptionMapper systemOptionMapper;
	
	@Autowired
	private ApMapMapper apMapMapper;

	@Override
	public SystemOptionBean getSystemOptionData() {
		List<SystemOption> list = systemOptionMapper.findAll();
		return new SystemOptionBean(list);
	}

	@Override
	public void updateSystemOption(SystemOptionBean bean) {
		systemOptionMapper.batchUpdateSystemOption(bean.generateSystemOptionMap(), SystemOptionEnums.SYSTEM_OPTION_KEY.getKeyList());
		WebRuntimeData.instance.instance.reloadSystemOptionBean();
	}

	@Override
	public String addApMap(MultipartFile image) {
		try {
			if(null != image){
				String fileName = image.getOriginalFilename();
				if(fileName.lastIndexOf(".") <0){
					return "{\"result\":false,\"msg\":\"只允许格式为[jpg,png]其中之一的文件\"}";
				}
				String suffix = fileName.substring(fileName.lastIndexOf(".")+1, fileName.length());
				if(!StringUtils.containsIgnoreCase(SystemConstants.AP_MAP_SUFFIX, suffix)){
					return "{\"result\":false,\"msg\":\"只允许格式为[jpg,png]其中之一的文件\"}";
				}
				if(image.getSize() > SystemConstants.AP_MAP_MAX_SIZE * 1024){	
					return "{\"result\":false,\"msg\":\"地图大小不能超过"+SystemConstants.AP_MAP_MAX_SIZE+"kb\"}";
				}
				String apMapName = "schoolMap."+suffix;
				ApMap apMap = apMapMapper.findByApMapName(apMapName);
				if(null!=apMap){
					apMap.setCreateTime(new Date());
					apMapMapper.updateByPrimaryKey(apMap);
					//覆盖原来的apMap
					File map = new File(SystemConstants.AP_MAP_PATH+ apMapName);
					if(map.exists() && map.isFile()){
						map.delete();
					}
				}else{
					apMap = new ApMap();
					apMap.setCreateTime(new Date());
					apMap.setApMapUuid(UUIDGenerator.getGUID());
					apMap.setApMapName(apMapName);
					
					//如果文件夹不存在则创建    
					File imageFileFolder = new File(SystemConstants.AP_MAP_PATH);
					if(!imageFileFolder.exists() || !imageFileFolder.isDirectory()){
						imageFileFolder.mkdirs();
					}
					apMapMapper.insert(apMap);
				}
				//如果文件夹不存在则创建    
				File imageFileFolder = new File(SystemConstants.AP_MAP_PATH);
				if(!imageFileFolder.exists() || !imageFileFolder.isDirectory()){
					imageFileFolder.mkdirs();
				}
				File mapFile = new File(SystemConstants.AP_MAP_PATH +"\\"+apMapName);
				mapFile.createNewFile();
				image.transferTo(mapFile);
				return "{\"result\":true}";
			}else{
				return "{\"result\":false,\"msg\":\"地图不能为空\"}";
			}
		} catch (Exception e) {
			return "{\"result\":false,\"msg\":\""+e.getMessage()+"\"}";
		} 
	}
}
