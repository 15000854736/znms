package info.zznet.znms.base.job;

import info.zznet.znms.base.entity.ApInformation;
import info.zznet.znms.base.entity.Host;
import info.zznet.znms.base.util.UUIDGenerator;
import info.zznet.znms.spider.bean.ApProperties;
import info.zznet.znms.spider.bean.ScanHost;
import info.zznet.znms.spider.util.SnmpUtil;
import info.zznet.znms.web.module.apInformation.service.ApInformationService;
import info.zznet.znms.web.module.system.service.HostService;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.quartz.DisallowConcurrentExecution;
import org.snmp4j.mp.SnmpConstants;
import org.snmp4j.smi.OID;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;


@Service
@DisallowConcurrentExecution
public class ApInfomationJob {
	
	
	@Autowired
	private HostService hostService;
	
	@Autowired
	private ApInformationService apInformationService;
	
	public static Map<String,ApInformation> apInfomationMap=new HashMap<String, ApInformation>();
	
	@Scheduled(initialDelay =10*1000,fixedDelay = 60*1000)
	public void updateApInfomation(){
		  List<Host> hostList = hostService.findAllAc();
	      for (Host host : hostList) {
	    	  ScanHost scanHost=new ScanHost();
	    	  scanHost.setCommunity(host.getSnmpCommunity());
	    	  scanHost.setSnmpUserName(host.getSnmpUserName());
	    	  scanHost.setSnmpAuthProtocol(host.getSnmpAuthProtocol());
	    	  scanHost.setSnmpPrivPassphrase(host.getSnmpPrivPassphrase());
	    	  scanHost.setSnmpVersion(host.getSnmpVersion()+"");
	    	  scanHost.setIp(host.getHostIp());
	    	  scanHost.setSnmpPort(host.getSnmpPort()+"");
	    	  scanHost.setSnmpPassword(host.getSnmpPassword());
	    	  scanHost.setSnmpUserName(host.getSnmpUserName());
	    	  	OID[] columns =new OID[2];
				//mac
				columns[0] = new OID ("1.3.6.1.4.1.4881.1.1.10.2.56.2.1.1.1.1");
				//当前在线人数
				columns[1] = new OID("1.3.6.1.4.1.4881.1.1.10.2.56.2.1.1.1.34");
	    	  List<ApProperties> apResult=SnmpUtil.getApInfo(scanHost,columns);
	    	  int AP_ALL_COUNT=0;
	    	  for (ApProperties apProperties : apResult) {
	    		  ApInformation apInformation =apInfomationMap.get(apProperties.getApMac().trim());
	    		  if(apInformation!=null){
	    			  AP_ALL_COUNT=AP_ALL_COUNT+Integer.parseInt(apProperties.getOnLineNum().trim());
	    			  apInformation.setApUserCount(Integer.parseInt(apProperties.getOnLineNum().trim()));
	    			  apInformation.setLastUpdateTime(new java.util.Date());
	    			  apInfomationMap.put(apProperties.getApMac(), apInformation);
	    		  }
			}
	    	  ApInformation apInfo=new ApInformation();
	    	  apInfo.setApUserCount(AP_ALL_COUNT);
	    	  apInfomationMap.put("AP_ALL_COUNT",apInfo);
	      }
	}
	
	@Scheduled(initialDelay =60*1000,fixedDelay = 60 * 60 *1000)
	public void updateApInfomationHour(){
		List<Host> hostList = hostService.findAllAc();
		for (Host host : hostList) {
	    	  ScanHost scanHost=new ScanHost();
	    	  scanHost.setCommunity(host.getSnmpCommunity());
	    	  scanHost.setSnmpUserName(host.getSnmpUserName());
	    	  scanHost.setSnmpAuthProtocol(host.getSnmpAuthProtocol());
	    	  scanHost.setSnmpPrivPassphrase(host.getSnmpPrivPassphrase());
	    	  scanHost.setSnmpVersion(host.getSnmpVersion()+"");
	    	  scanHost.setIp(host.getHostIp());
	    	  scanHost.setSnmpPort(host.getSnmpPort()+"");
	    	  scanHost.setSnmpPassword(host.getSnmpPassword());
	    	  scanHost.setSnmpUserName(host.getSnmpUserName());
	    	  OID[] columns =new OID[4];
				//mac
				columns[0] = new OID ("1.3.6.1.4.1.4881.1.1.10.2.56.2.1.1.1.1");
				//IP
				columns[1] = new OID("1.3.6.1.4.1.4881.1.1.10.2.56.2.1.1.1.33");
				//当前在线人数
				columns[2] = new OID("1.3.6.1.4.1.4881.1.1.10.2.56.2.1.1.1.34");
				//最大在线人数
				columns[3] = new OID("1.3.6.1.4.1.4881.1.1.10.2.56.2.1.1.1.41");
	    	  List<ApProperties> apResult=SnmpUtil.getApInfo(scanHost,columns);
	    	  for (ApProperties apProperties : apResult) {
	    		  ApInformation apInformation = apInformationService.findApByApMac(apProperties.getApMac().trim());
	    		  if(apInformation!=null){
	    			  apInformation.setApUserCount(Integer.parseInt(apProperties.getOnLineNum().trim()));
	    			  apInformation.setApUserMax(Integer.parseInt(apProperties.getOnLineMaxNum().trim()));
	    			  apInformation.setLastUpdateTime(new java.util.Date());
	    			  apInformation.setApIp(apProperties.getApIp());
	    			  apInformationService.updateByPrimaryKeySelective(apInformation);
	    		  }else{
	    			  apInformation=new  ApInformation();
	    			  apInformation.setApInformationUuid(UUIDGenerator.getGUID());
	    			  apInformation.setApMac(apProperties.getApMac());
	    			  apInformation.setApIp(apProperties.getApIp());
	    			  apInformation.setApUserCount(Integer.parseInt(apProperties.getOnLineNum().trim()));
	    			  apInformation.setApUserMax(Integer.parseInt(apProperties.getOnLineMaxNum().trim()));
	    			  apInformation.setLastUpdateTime(new java.util.Date());
	    			  apInformationService.addApInformation(apInformation);
	    		  }
			}
	    	  List<ApInformation>  apInformations= apInformationService.findAll();
	    	  List apList=new ArrayList(); 
	    	  for (ApInformation apInformation : apInformations) {
	    		  apList.add(apInformation.getApMac());
	    		  apInfomationMap.put(apInformation.getApMac(), apInformation);
			 }
	    	 
	    	  for (Map.Entry<String, ApInformation> entry : apInfomationMap.entrySet()) {
	    		  boolean flag= apList.contains(entry.getKey());
	    		  if(!flag){
	    			  apInfomationMap.remove(entry.getKey());
	    		  }
	    	  }
	    	 apList.clear();
	      }
	}
	
}
