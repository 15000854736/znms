/**
 * 
 */
package info.zznet.znms.web.module.system.service.impl;

import info.zznet.znms.base.dao.ThresholdValueMapper;
import info.zznet.znms.base.entity.ThresholdValue;
import info.zznet.znms.base.util.StringUtil;
import info.zznet.znms.base.util.UUIDGenerator;
import info.zznet.znms.web.module.common.page.Pager;
import info.zznet.znms.web.module.common.service.impl.BaseServiceImpl;
import info.zznet.znms.web.module.system.service.ThresholdValueService;
import info.zznet.znms.web.start.SystemStartThread;
import info.zznet.znms.web.start.ThresholdValueThread;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 * @author dell001
 *
 */
@Service("thresholdVlaueService")
@Transactional(propagation = Propagation.REQUIRED,rollbackFor=Exception.class)
public class ThresholdValueServiceImpl extends BaseServiceImpl implements ThresholdValueService{

	@Autowired
	private ThresholdValueMapper thredsholdValueMapper;

	@Override
	public Pager<ThresholdValue> findPageList(Pager<ThresholdValue> pager) {
		JSONArray searchCondition = null;
		if (pager != null && !StringUtil.isNullString(pager.getSearch())) {
			searchCondition = JSONArray.fromObject(pager.getSearch());
		}
		List<ThresholdValue> list = thredsholdValueMapper.findPageList(pager,
				searchCondition);
		pager.setRows(list);
		pager.setTotal(thredsholdValueMapper.getCount(searchCondition));
		return pager;
	}

	@Override
	public String add(ThresholdValue thresholdValue) {
		//校验这类阀值是否已经存在
		String hostUuid = thresholdValue.getHostUuid();
		String gragphUuid = thresholdValue.getGraphUuid();
		int flowDirection = thresholdValue.getFlowDirection();
		ThresholdValue thre = thredsholdValueMapper.chekcIsExistValue(hostUuid, gragphUuid, flowDirection);
		if(null!=thre){
			return "{\"result\":false,\"msg\":\"已存在这种阀值\"}";
		}
		thresholdValue.setThresholdValueUuid(UUIDGenerator.getGUID());
		thresholdValue.setCreateTime(new Date());
		thredsholdValueMapper.insert(thresholdValue);
		Map<String,List<ThresholdValue>> map = ThresholdValueThread.map;
		if(map.containsKey(gragphUuid)){
			//维护内存中的map
			map.get(gragphUuid).add(thresholdValue);
		}else{
			List<ThresholdValue> list = new ArrayList<ThresholdValue>();
			list.add(thresholdValue);
			map.put(gragphUuid, list);
		}
		return "{\"result\":true}";
	}
	

	@Override
	public void update(ThresholdValue thresholdValue) {
		thredsholdValueMapper.updateByPrimaryKey(thresholdValue);
		//维护内存中的阀值map
		maintainThresholdValueMap(thresholdValue);
	}

	@Override
	public ThresholdValue selectByPrimaryKey(String thresholdValueUuid) {
		return thredsholdValueMapper.selectByPrimaryKey(thresholdValueUuid);
	}

	@Override
	public void deleteByPrimaryKey(String thresholdValueUuid) {
		ThresholdValue value = thredsholdValueMapper.selectByPrimaryKey(thresholdValueUuid);
		thredsholdValueMapper.deleteByPrimaryKey(thresholdValueUuid);
		//维护内存中的阀值map
		maintainThresholdValueMap(value);
	}

	@Override
	public void deleteThresholdValueList(List<String> uuids) {
		for (String thresholdValueUuid : uuids) {
			deleteByPrimaryKey(thresholdValueUuid);
		}
	}

	@Override
	public void updateThresholdValueEnable(List<String> uuidList) {
		thredsholdValueMapper.updateThresholdValueEnable(uuidList);
	}

	@Override
	public void updateThresholdValueDisable(List<String> uuidList) {
		thredsholdValueMapper.updateThresholdValueDisable(uuidList);
	}

	@Override
	public List<ThresholdValue> findAll() {
		return thredsholdValueMapper.findAll();
	}

	@Override
	public ThresholdValue checkThresholdValueName(String thresholdValueUuid,
			String thresholdValueName) {
		return thredsholdValueMapper.checkThresholdValueName(thresholdValueUuid, thresholdValueName);
	}
	
	private void maintainThresholdValueMap(ThresholdValue thresholdValue){
		Map<String,List<ThresholdValue>> map = ThresholdValueThread.map;
		//维护内存中的map
		List<ThresholdValue> list = map.get(thresholdValue.getGraphUuid());
		List<ThresholdValue> valueList = new ArrayList<ThresholdValue>();
		if(null!=list && list.size()>0){
			for (ThresholdValue tv : list) {
				if(tv.getThresholdValueUuid().equals(thresholdValue.getThresholdValueUuid())){
					valueList.add(thresholdValue);
				}else{
					valueList.add(tv);
				}
			}
		}
		map.put(thresholdValue.getGraphUuid(), valueList);
	}

}
