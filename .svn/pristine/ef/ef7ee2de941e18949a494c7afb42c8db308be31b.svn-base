package info.zznet.znms.web.module.screen;

import info.zznet.znms.base.bean.ZlogSystemStatus;
import info.zznet.znms.base.common.BaseController;
import info.zznet.znms.base.common.ZNMSLogger;
import info.zznet.znms.base.constants.PermissionConstants;
import info.zznet.znms.base.constants.SystemConstants;
import info.zznet.znms.base.dao.ApInformationMapper;
import info.zznet.znms.base.dao.ExportLinkMapper;
import info.zznet.znms.base.entity.ApInformation;
import info.zznet.znms.base.entity.ExportLink;
import info.zznet.znms.base.job.ApInfomationJob;
import info.zznet.znms.base.rrd.bean.Graph;
import info.zznet.znms.base.rrd.bean.SubItem;
import info.zznet.znms.base.rrd.core.RrdFetcher;
import info.zznet.znms.base.rrd.exception.RrdQueryException;
import info.zznet.znms.base.util.EncryptionMD5;
import info.zznet.znms.web.WebRuntimeData;
import info.zznet.znms.web.annotation.CheckPermission;
import info.zznet.znms.web.module.screen.bean.ExportStreamInfo;
import info.zznet.znms.web.module.screen.bean.HeatData;
import info.zznet.znms.web.module.screen.bean.OnlineUserInfo;
import info.zznet.znms.web.module.screen.bean.UrlRanking;
import info.zznet.znms.web.module.system.bean.SystemOptionBean;
import info.zznet.znms.web.util.ConfigUtil;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentLinkedQueue;

import javax.imageio.ImageIO;

import net.sf.json.JSONArray;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

@Controller
@RequestMapping("/screen")
public class ScreenController extends BaseController{
	private static final String VIEW = "/screen/screen";
	
	@Autowired
	private ExportLinkMapper exportLinkMapper;
	@Autowired
	private ApInformationMapper apInfoMapper;
	private WebRuntimeData webRuntimeData = WebRuntimeData.instance;
	
	
	@RequestMapping({"","/"})
	@CheckPermission(PermissionConstants.P_SCREEN_VIEW)
	public ModelAndView init(){
		SystemOptionBean config = webRuntimeData.getSystemOptionBean();
		ModelAndView mav = new ModelAndView(VIEW);
		mav.addObject("leftUp", getOnlineUserCount());
		try{
			mav.addObject("centerUp", JSONArray.fromObject(getHeatData(config.getSchoolBg())).toString());
		} catch(Exception e) {
			ZNMSLogger.error(e);
		}
		mav.addObject("rightUp", getNetHealthPoint());
		List<ExportStreamInfo> exportStreamInfoList = getExportStreamInfo();
		mav.addObject("leftDown", exportStreamInfoList);
		Map<String, Object> rightDownMap = getRightDownAreaData();
		mav.addObject("rightDown", rightDownMap);
		
		mav.addObject("mapImage", config.getSchoolBg());
		mav.addObject("logoImage", config.getIndexBg());
		mav.addObject("bgImage", config.getHomeBg());
		mav.addObject("apMaxUserCount", config.getApMaxUserCount());
		mav.addObject("heatMapRadius", config.getHeatMapRadius());

		return mav;
	}

	@RequestMapping(value = "/module/{module}")
	@CheckPermission(PermissionConstants.P_SCREEN_VIEW)
	public ModelAndView loadModule(@PathVariable String module){
		SystemOptionBean config = webRuntimeData.getSystemOptionBean();
		ModelAndView mav = new ModelAndView("/screen/module/"+module+"/index");
		return mav;
	}
	
	@RequestMapping(value = "/getLeftUpAreaData", method = RequestMethod.POST, produces = {"application/json;charset=UTF-8"})
	@ResponseBody
	public OnlineUserInfo getLeftUpAreaData(){	
		return getOnlineUserCount();
	}
	
	@RequestMapping(value = "/getRightUpAreaData", method = RequestMethod.POST, produces = {"application/json;charset=UTF-8"})
	@ResponseBody
	public int getRightUpAreaData(){
		return getNetHealthPoint();
	}
	
	@RequestMapping(value = "/getCenterUpAreaData", method = RequestMethod.POST, produces = {"application/json;charset=UTF-8"})
	@ResponseBody
	public List<HeatData> getCenterUpAreaData(){
		try {
			String mapImage =  new SystemOptionBean().getSchoolBg();
			return getHeatData(mapImage);
		} catch(Exception e) {
			ZNMSLogger.error(e);
			return new ArrayList<HeatData>();
		}
	}
	
	@RequestMapping(value = "/getRightDownAreaData", method = RequestMethod.POST, produces = {"application/json;charset=UTF-8"})
	@ResponseBody
	public Map<String, Object> getRightDownAreaData() {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("urlRankingData", getUrlRanking());
		
		ConcurrentLinkedQueue<ZlogSystemStatus> zlogSystemStatusData = webRuntimeData.getZlogSystemStatusList();
		List<String> zlogSystemStatusXaxis = getXaxis(0, 5, 12, "yyyy-MM-dd HH:mm");
		map.put("systemStatusData", zlogSystemStatusData);
		map.put("systemStatusXaxis", zlogSystemStatusXaxis);
		
		List<Long> natLogCountData = webRuntimeData.getZlogNatlogCountList();
		List<Long> urlLogCountData = webRuntimeData.getZlogUrlLogCountList();
		List<String> zlogLogCountXaxis = new ArrayList<String>();
		for(int i=8;i>0;i--){
			zlogLogCountXaxis.add(i+"小时前");
		}
		List<Long> _natLogCountData = new ArrayList<Long>();
		List<Long> _urlLogCountData = new ArrayList<Long>();
		if(natLogCountData != null && urlLogCountData != null) {
			for(int i=7;i>=0;i--){
				_natLogCountData.add(natLogCountData.get(i));
				_urlLogCountData.add(urlLogCountData.get(i));
			}
		}
		
		map.put("natLogCountData", _natLogCountData);
		map.put("urlLogCountData", _urlLogCountData);
		map.put("logCountXaxis", zlogLogCountXaxis);
		
		return map;
	}
	
	@RequestMapping(value = "/getLeftDownAreaData", method = RequestMethod.POST, produces = {"application/json;charset=UTF-8"})
	@ResponseBody
	public List<ExportStreamInfo> getLeftDownAreaData() {
		return getExportStreamInfo();
	}
	
	private Map<String, Object> getUrlRanking(){
		List<UrlRanking> urlRankingList = webRuntimeData.getUrlRankingList();
		List<UrlRanking> _urlRankingList = new ArrayList<UrlRanking>();
		long total = 0l;
		if(urlRankingList != null) {
			int i=0;
			for(UrlRanking urlRanking : urlRankingList) {
				if(i>=5){
					break;
				}
				total += urlRanking.getCount();
				_urlRankingList.add(urlRanking);
				i++;
			}
		}
		Map<String, Object> retVal = new HashMap<String, Object>();
		retVal.put("urlRankingList", _urlRankingList);
		retVal.put("total", total);
		return retVal;
	}
	
	/**
	 * 获取网络健康指数
	 * @return
	 */
	private int getNetHealthPoint(){
		return webRuntimeData.getNetworkHealth();
	}
	
	/**
	 * 获取在线数
	 * @return
	 */
	private OnlineUserInfo getOnlineUserCount(){
		return webRuntimeData.getOnlineUserInfo();
	}
	
	private List<HeatData> getHeatData(String mapFileName){
		ZNMSLogger.debug("begin get heat data");
		List<HeatData> list = new ArrayList<HeatData>();
		Map<String, ApInformation> apInfoMap = ApInfomationJob.apInfomationMap;
		BufferedImage bufferedImage = null;
		try {
			File imageFile = new File(ConfigUtil.getString("znms.image.path") + mapFileName);
			if(!imageFile.exists() || !imageFile.isFile()) {
				return list;
			}
			imageFile.lastModified();
			bufferedImage = ImageIO.read(imageFile);
		} catch (IOException e) {
			ZNMSLogger.error(e);
			return list;
		}   
		int width = bufferedImage.getWidth();   
		int height = bufferedImage.getHeight();
		ZNMSLogger.debug("apMap size:"+apInfoMap.size());
		if(apInfoMap != null) {

			for(String key : apInfoMap.keySet()) {
				ApInformation apInfo = apInfoMap.get(key);
				String axis = apInfo.getApAxis();
				//ZNMSLogger.debug("ap:"+apInfo.getApMac()+",axis:"+axis);
				if(!StringUtils.contains(axis, ",")) {
					continue;
				}
				BigDecimal absoluteX = new BigDecimal(axis.split(",")[0]);
				BigDecimal absoluteY = new BigDecimal(axis.split(",")[1]);
				//ZNMSLogger.debug("absoluteX:"+absoluteX+", absoluteY:"+absoluteY);
				BigDecimal x = absoluteX.divide(new BigDecimal(width), 8, BigDecimal.ROUND_HALF_UP);
				BigDecimal y = absoluteY.divide(new BigDecimal(height), 8, BigDecimal.ROUND_HALF_UP);
				HeatData heatData = new HeatData();
				heatData.setValue(new BigDecimal(apInfo.getApUserCount()));
				heatData.setX(x);
				heatData.setY(y);
				//ZNMSLogger.debug("heat data:("+x+","+y+")"+heatData.getValue());
				if(x.compareTo(BigDecimal.ONE)>0) {
					//ZNMSLogger.warn("heat data x value larger than 1" + x);
				}
				if(y.compareTo(BigDecimal.ONE)>0) {
					//ZNMSLogger.warn("heat data y value larger than 1" + y);
				}
				list.add(heatData);
			}
		}
		return list;
	}
	
	/**
	 * 获取出口流量信息
	 * @return
	 */
	private List<ExportStreamInfo> getExportStreamInfo(){
		List<ExportStreamInfo> exportStreamInfoList = new ArrayList<ExportStreamInfo>();
		
		List<ExportLink> exportLinkList = exportLinkMapper.findLatestThree();
		if(exportLinkList == null) {
			return exportStreamInfoList;
		}
		
		Calendar now = Calendar.getInstance();
		Calendar oneHourAgo = Calendar.getInstance();
		now.set(Calendar.SECOND, 0);
		now.set(Calendar.MILLISECOND, 0);
		oneHourAgo.set(Calendar.SECOND, 0);
		oneHourAgo.set(Calendar.MILLISECOND, 0);
		oneHourAgo.add(Calendar.MINUTE, -60);
		
		for(ExportLink exportLink : exportLinkList){
			try {
				Graph graph = RrdFetcher.fetchDataAndConvertToGraph(
						SystemConstants.TEMPLATE_NAME_NET_STREAM,
						exportLink.getGraphUuid(), oneHourAgo.getTimeInMillis(),
						now.getTimeInMillis());
				if(graph == null) {
					continue;
				}
				ExportStreamInfo exportStreamInfo = new ExportStreamInfo();
				exportStreamInfo.setDivId(EncryptionMD5.getMD5(exportLink.getExportLinkDescription()));
				exportStreamInfo.setGraph(graph);
				exportStreamInfo.setName(exportLink.getExportLinkDescription());
				exportStreamInfo.setMaxBandWidth(exportLink.getMaxBandWidth());
				List<SubItem> subItems = graph.getData();
				if(subItems == null) {
					exportStreamInfo.setUpStream(0d);
					exportStreamInfo.setDownStream(0d);
				} else {
					SubItem upStream = subItems.get(0);
					List<String> data = upStream.getData();
					if(data == null) {
						exportStreamInfo.setUpStream(0d);
					} else {
						exportStreamInfo.setUpStream(Double.parseDouble(data.get(data.size() - 1)));
					}
					SubItem downStream = subItems.get(1);
					data = downStream.getData();
					if(data == null) {
						exportStreamInfo.setDownStream(0d);
					} else {
						exportStreamInfo.setDownStream(Double.parseDouble(data.get(data.size() - 1)));
					}
				}
				
				exportStreamInfoList.add(exportStreamInfo);
			} catch (RrdQueryException e) {
				ZNMSLogger.error(e);
				continue;
			}
		}
		return exportStreamInfoList;
	}
	
	/**
	 * 获取时间轴
	 * @param offset 起始偏移量
	 * @param seperate 间隔（分钟）
	 * @param total 总数
	 * @param format 格式
	 * @return
	 */
	private List<String> getXaxis(int offset, int seperate, int total, String format){
		List<String> xAxisList = new ArrayList<>();
		Calendar calendar = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat(format);
		calendar.set(Calendar.MILLISECOND, 0);
		calendar.set(Calendar.SECOND, 0);
		calendar.add(Calendar.MINUTE, (-seperate * total) + (-offset * seperate));
		for(int i = 0;i<total;i++){
			calendar.add(Calendar.MINUTE, seperate);
			xAxisList.add(sdf.format(calendar.getTime()));
		}
		return xAxisList;
	}
}
