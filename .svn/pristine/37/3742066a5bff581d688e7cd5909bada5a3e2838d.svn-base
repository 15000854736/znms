package info.zznet.znms.spider.util;

import info.zznet.znms.base.common.ZNMSLogger;
import info.zznet.znms.spider.bean.Interface;
import info.zznet.znms.spider.bean.ScanHost;
import info.zznet.znms.spider.bean.ScanItem;
import info.zznet.znms.spider.bean.ScanResult;
import info.zznet.znms.spider.constants.SnmpConstants;
import org.apache.commons.lang.StringUtils;
import org.snmp4j.CommunityTarget;
import org.snmp4j.PDU;
import org.snmp4j.Snmp;
import org.snmp4j.event.ResponseEvent;
import org.snmp4j.event.ResponseListener;
import org.snmp4j.smi.*;
import org.snmp4j.transport.DefaultUdpTransportMapping;
import org.snmp4j.util.DefaultPDUFactory;
import org.snmp4j.util.TableEvent;
import org.snmp4j.util.TableUtils;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by shenqilei on 2016/9/22.
 */
public class SnmpUtil {

    public static List<ScanResult> getResult(ScanHost scanHost){
        List<ScanResult> result = new ArrayList<>();

        if (null!=scanHost&&
                !StringUtils.equals(SnmpConstants.HOST_STATUS_DOWN,scanHost.getStatus())&&
                (null!=scanHost.getScanItems()&&!scanHost.getScanItems().isEmpty())){
            Snmp snmp = null;
            try{
                if (StringUtils.equals(SnmpConstants.SNMP_VERSION_1,scanHost.getSnmpVersion())){
                    //TODO 实现v1 协议
                }else if (StringUtils.equals(SnmpConstants.SNMP_VERSION_2,scanHost.getSnmpVersion())){
                    String port = SnmpConstants.SNMP_DEFAULT_PORT;
                    if (StringUtils.isNotEmpty(scanHost.getSnmpPort())){
                        port = scanHost.getSnmpPort();
                    }
                    String community = SnmpConstants.SNMP_DEFAULT_COMMUNITY;
                    if (StringUtils.isNotEmpty(scanHost.getCommunity())){
                        community = scanHost.getCommunity();
                    }
                    Address targetAddress = GenericAddress.parse("udp:"+scanHost.getIp()+"/"+port);
                    CommunityTarget communityTarget = new CommunityTarget();
                    communityTarget.setCommunity(new OctetString(community));
                    communityTarget.setAddress(targetAddress);
                    communityTarget.setRetries(SnmpConstants.SNMP_RETRIES);
                    communityTarget.setTimeout(SnmpConstants.SNMP_TIMEOUT);
                    communityTarget.setVersion(org.snmp4j.mp.SnmpConstants.version2c);

                    PDU pdu = new PDU();
                    for (ScanItem scanItem:scanHost.getScanItems()){
                        pdu.add(new VariableBinding(new OID(scanItem.getOid())));
                    }
                    pdu.setType(PDU.GET);

                    snmp = new Snmp(new DefaultUdpTransportMapping());
                    snmp.listen();

                    //同步
                    ResponseEvent responseEvent = snmp.send(pdu,communityTarget);
                    if (null!=responseEvent&&
                            responseEvent.getResponse().size()==scanHost.getScanItems().size()){
                        int i=0;
                        String[] netStreamValue = new String[]{"0","0"};
                        ScanResult netStreamScanResult = null;
                        for (ScanItem scanItem:scanHost.getScanItems()){
                            if ("netStream".equals(scanItem.getRrdTemplateName())){
                                if ("upStream".equals(scanItem.getRrdDS())){
                                	String upStream = responseEvent.getResponse().get(i).getVariable().toString();
                                    netStreamValue[0] = String.valueOf(Long.parseLong(upStream) * 8l);
                                }else if("downStream".equals(scanItem.getRrdDS())){
                                	String downStream = responseEvent.getResponse().get(i).getVariable().toString();
                                    netStreamValue[1] = String.valueOf(Long.parseLong(downStream) * 8l);
                                }
                                if (null==netStreamScanResult){
                                    netStreamScanResult = new ScanResult();
                                    netStreamScanResult.setRrdDataId(scanItem.getRrdDataId());
                                    netStreamScanResult.setRrdTemplateName(scanItem.getRrdTemplateName());
                                }
                            }else{
                                ScanResult scanResult = new ScanResult();
                                scanResult.setValue(new String[]{responseEvent.getResponse().get(i).getVariable().toString()});
                                scanResult.setRrdFile(scanItem.getRrdFile());
                                scanResult.setRrdDS(scanItem.getRrdDS());
                                scanResult.setRrdDataId(scanItem.getRrdDataId());
                                scanResult.setRrdTemplateName(scanItem.getRrdTemplateName());
                                result.add(scanResult);
                            }
                            i++;
                        }

                        //有流量信息
                        if (null!=netStreamScanResult){
                            netStreamScanResult.setValue(netStreamValue);
                            result.add(netStreamScanResult);
                        }
                    }

                }else if (StringUtils.equals(SnmpConstants.SNMP_VERSION_3,scanHost.getSnmpVersion())){
                    //TODO 实现v3协议
                }else{
                    ZNMSLogger.warn("主机["+scanHost+"]，SNMP版本号有误："+scanHost.getSnmpVersion());
                }
            }catch (Exception e){
                ZNMSLogger.error("主机["+scanHost+"]，获取信息失败。",e);
            }finally {
                if (null!=snmp){
                    try {
                        snmp.close();
                    } catch (IOException e) {
                        ZNMSLogger.error(e);
                    }
                }
            }
        }

        return result;
    }

    /**
     * 获取指定设备接口信息
     * @return
     */
    public static List<Interface> getInterfaces(ScanHost scanHost){
        List<Interface> result = new ArrayList<>();

        if(null!=scanHost){
            try{
                if (StringUtils.equals(SnmpConstants.SNMP_VERSION_1,scanHost.getSnmpVersion())){
                    //TODO 实现v1协议
                }else if(StringUtils.equals(SnmpConstants.SNMP_VERSION_2,scanHost.getSnmpVersion())){
                    String port = SnmpConstants.SNMP_DEFAULT_PORT;
                    if (StringUtils.isNotEmpty(scanHost.getSnmpPort())){
                        port = scanHost.getSnmpPort();
                    }
                    String community = SnmpConstants.SNMP_DEFAULT_COMMUNITY;
                    if (StringUtils.isNotEmpty(scanHost.getCommunity())){
                        community = scanHost.getCommunity();
                    }
                    Address targetAddress = GenericAddress.parse("udp:"+scanHost.getIp()+"/"+port);
                    CommunityTarget communityTarget = new CommunityTarget();
                    communityTarget.setCommunity(new OctetString(community));
                    communityTarget.setAddress(targetAddress);
                    communityTarget.setRetries(SnmpConstants.SNMP_RETRIES);
                    communityTarget.setTimeout(SnmpConstants.SNMP_TIMEOUT);
                    communityTarget.setVersion(org.snmp4j.mp.SnmpConstants.version2c);

                    Snmp snmp = new Snmp(new DefaultUdpTransportMapping());
                    snmp.listen();

                    OID[] columns =new OID[4];
                    //ifName
                    columns[0] = new OID ("1.3.6.1.2.1.31.1.1.1.1");
                    //ifLinkUpDownTrapEnable
                    columns[1] = new OID("1.3.6.1.2.1.31.1.1.1.14");
                    //ifHighSpeed
                    columns[2] = new OID("1.3.6.1.2.1.31.1.1.1.15");
                    //ifAlias
                    columns[3] = new OID("1.3.6.1.2.1.31.1.1.1.18");

                    TableUtils tableUtils = new TableUtils(snmp,new DefaultPDUFactory(PDU.GETNEXT));
                    List<TableEvent> tableEvents = tableUtils.getTable(communityTarget,columns,null,null);

                    for (TableEvent tableEvent:tableEvents){

                        if (!tableEvent.isError()){
                            VariableBinding[] variableBindings = tableEvent.getColumns();
                            if (null!=variableBindings&&
                                    variableBindings.length==4){
                                Interface intf = new Interface();
                                intf.setIndex(tableEvent.getIndex().getValue()[0]);
                                intf.setName(variableBindings[0].toValueString());
                                intf.setStatus(variableBindings[1].toValueString());
                                intf.setAlias(variableBindings[3].toValueString());
                                result.add(intf);
                            }
                        }
                    }

                }else if(StringUtils.equals(SnmpConstants.SNMP_VERSION_3,scanHost.getSnmpVersion())){
                    //TODO 实现v3协议
                }else{
                    ZNMSLogger.warn("主机["+scanHost+"]，SNMP版本号有误："+scanHost.getSnmpVersion());
                }
            }catch (Exception e){
                ZNMSLogger.error(e);
            }
        }
        return result;
    }
}
