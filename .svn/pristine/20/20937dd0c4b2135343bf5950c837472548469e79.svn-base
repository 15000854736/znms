package info.zznet.znms.base.job;

import info.zznet.znms.base.common.ZNMSLogger;
import info.zznet.znms.base.dao.ApInformationMapper;
import info.zznet.znms.base.entity.ApInformation;
import info.zznet.znms.base.entity.Host;
import info.zznet.znms.base.util.UUIDGenerator;
import info.zznet.znms.spider.bean.ApProperties;
import info.zznet.znms.spider.bean.ScanHost;
import info.zznet.znms.spider.util.SnmpUtil;
import info.zznet.znms.web.module.apInformation.service.ApInformationService;
import info.zznet.znms.web.module.system.service.HostService;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.quartz.DisallowConcurrentExecution;
import org.snmp4j.smi.OID;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;


@Service("ApInfomationJob")
@DisallowConcurrentExecution
public class ApInfomationJob {
	
	
	@Autowired
	private HostService hostService;
	
	@Autowired
	private ApInformationService apInformationService;
	
	@Autowired
	private ApInformationMapper apInfoMapper;
	
	public static Map<String,ApInformation> apInfomationMap=new ConcurrentHashMap<String, ApInformation>();
	
	@Scheduled(initialDelay =30*1000,fixedDelay = 60*1000)
	public void updateApInfomation(){
		  List<Host> hostList = hostService.findAllAc();
		  ZNMSLogger.debug("before update size:"+apInfomationMap.size());
	      for (Host host : hostList) {
	    	  ScanHost scanHost=new ScanHost();
	    	  scanHost.setCommunity(host.getSnmpCommunity());
	    	  scanHost.setSnmpUserName(host.getSnmpUserName());
	    	  scanHost.setSnmpAuthProtocol(host.getSnmpAuthProtocol());
	    	  scanHost.setSnmpPrivPassphrase(host.getSnmpPrivPassphrase());
	    	  scanHost.setSnmpVersion(host.getSnmpVersion()+"");
	    	  scanHost.setIp(host.getHostIp());
	    	  scanHost.setSnmpPort(host.getSnmpPort()+"");
	    	  scanHost.setSnmpPassword(host.getSnmpPassword());
	    	  scanHost.setSnmpUserName(host.getSnmpUserName());
	    	  	OID[] columns =new OID[2];
				//mac
				columns[0] = new OID ("1.3.6.1.4.1.4881.1.1.10.2.56.2.1.1.1.1");
				//当前在线人数
				columns[1] = new OID("1.3.6.1.4.1.4881.1.1.10.2.56.2.1.1.1.34");
	    	  List<ApProperties> apResult=SnmpUtil.getApInfo(scanHost,columns);
	    	  for (ApProperties apProperties : apResult) {
	    		  ApInformation apInformation =apInfomationMap.get(apProperties.getApMac().trim());
	    		  if(apInformation!=null){
	    			  apInformation.setApUserCount(Integer.parseInt(apProperties.getOnLineNum().trim()));
	    			  apInformation.setLastUpdateTime(new java.util.Date());
	    			  apInfomationMap.put(apProperties.getApMac(), apInformation);
	    		  }
			}
	      }
		ZNMSLogger.debug("after update size:"+apInfomationMap.size());
	}
	
	@Scheduled(initialDelay =60*1000,fixedDelay = 60 * 60 *1000)
	public void updateApInfomationHour(){
		List<Host> hostList = hostService.findAllAc();
		List apList=new ArrayList();
		for (Host host : hostList) {
			scanAc(host,apList);
	  	}
		ZNMSLogger.debug("apList size:"+apList.size());
		ZNMSLogger.debug("apMap size:"+apInfomationMap.size());
		Iterator<Map.Entry<String, ApInformation>> it = apInfomationMap.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry<String, ApInformation> entry = it.next();
			boolean flag= apList.contains(entry.getKey());
			if(!flag){
				ZNMSLogger.debug("remove ap from map:"+entry.getValue().getApMac());
				it.remove();
			}
		}
		ZNMSLogger.debug("apMap size after remove:"+apInfomationMap.size());
		apList.clear();
	}

	public void scanAc(Host host,List<String> apList) {
		try{
			ScanHost scanHost=new ScanHost();
			scanHost.setCommunity(host.getSnmpCommunity());
			scanHost.setSnmpUserName(host.getSnmpUserName());
			scanHost.setSnmpAuthProtocol(host.getSnmpAuthProtocol());
			scanHost.setSnmpPrivPassphrase(host.getSnmpPrivPassphrase());
			scanHost.setSnmpVersion(host.getSnmpVersion()+"");
			scanHost.setIp(host.getHostIp());
			scanHost.setSnmpPort(host.getSnmpPort()+"");
			scanHost.setSnmpPassword(host.getSnmpPassword());
			scanHost.setSnmpUserName(host.getSnmpUserName());
			OID[] columns =new OID[5];
			//mac
			columns[0] = new OID ("1.3.6.1.4.1.4881.1.1.10.2.56.2.1.1.1.1");
			//IP
			columns[1] = new OID("1.3.6.1.4.1.4881.1.1.10.2.56.2.1.1.1.33");
			//当前在线人数
			columns[2] = new OID("1.3.6.1.4.1.4881.1.1.10.2.56.2.1.1.1.34");
			//最大在线人数
			columns[3] = new OID("1.3.6.1.4.1.4881.1.1.10.2.56.2.1.1.1.41");
			//ap name
			columns[4] = new OID("1.3.6.1.4.1.4881.1.1.10.2.56.2.1.1.1.2");

			List<ApProperties> apResult= SnmpUtil.getApInfo(scanHost,columns);

			for (ApProperties apProperties : apResult) {
				ApInformation apInformation = apInformationService.findApByApMac(apProperties.getApMac().trim());
				if(apInformation!=null){
					apInformation.setApUserCount(Integer.parseInt(apProperties.getOnLineNum().trim()));
					apInformation.setApUserMax(Integer.parseInt(apProperties.getOnLineMaxNum().trim()));
					apInformation.setLastUpdateTime(new java.util.Date());
					apInformation.setApIp(apProperties.getApIp());
					apInformationService.updateByPrimaryKeySelective(apInformation);
				}else{
					apInformation=new  ApInformation();
					apInformation.setApInformationUuid(UUIDGenerator.getGUID());
					apInformation.setApMac(apProperties.getApMac());
					apInformation.setApIp(apProperties.getApIp());
					apInformation.setAcIp(host.getHostIp());
					apInformation.setApUserCount(Integer.parseInt(apProperties.getOnLineNum().trim()));
					apInformation.setApUserMax(Integer.parseInt(apProperties.getOnLineMaxNum().trim()));
					apInformation.setLastUpdateTime(new java.util.Date());
					apInformation.setApName(apProperties.getApName());
					apInformationService.addApInformation(apInformation);
				}
				apList.add(apInformation.getApMac());
				apInfomationMap.put(apInformation.getApMac(), apInformation);
			}
		}catch (Exception e){
			ZNMSLogger.error(e);
		}
	}
	
	public void init() {
		List<ApInformation> apInfoList = apInfoMapper.findAll();
		if (apInfoList != null) {
			for (ApInformation apInfo : apInfoList) {
				apInfomationMap.put(apInfo.getApMac(), apInfo);
			}
		}
		ZNMSLogger.debug("apMap size after init:"+apInfomationMap.size());
	}

}
