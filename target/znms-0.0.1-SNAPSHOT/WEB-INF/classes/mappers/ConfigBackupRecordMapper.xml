<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="info.zznet.znms.base.dao.ConfigBackupRecordMapper" >
  <resultMap id="BaseResultMap" type="info.zznet.znms.base.entity.ConfigBackupRecord" >
    <id column="ID" property="id" jdbcType="VARCHAR" />
    <result column="HOST_UUID" property="hostUuid" jdbcType="VARCHAR" />
    <result column="BACKUP_TIME" property="backupTime" jdbcType="TIMESTAMP" />
    <result column="ACTIVATOR" property="activator" jdbcType="VARCHAR" />
    <result column="FILE_NAME" property="fileName" jdbcType="VARCHAR" />
    <result column="SUCCESS" property="success" jdbcType="BIT" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="info.zznet.znms.base.entity.ConfigBackupRecord" extends="BaseResultMap" >
    <result column="DEBUG_INFO" property="debugInfo" jdbcType="LONGVARCHAR" />
  </resultMap>
  <resultMap id="GroupedResultMap" type="info.zznet.znms.web.module.system.bean.GroupedConfigBackupRecord" >
    <result column="HOST_UUID" property="hostUuid" jdbcType="VARCHAR" />
    <result column="HOST_NAME" property="hostName" jdbcType="VARCHAR" />
    <result column="RECORD_COUNT" property="recordCount" jdbcType="INTEGER" />
    <result column="HOST_IP" property="hostIp" jdbcType="VARCHAR" />
    <result column="BACKUP_PATH" property="backupPath" jdbcType="TIMESTAMP" />
    <result column="LATEST_BACKUP_TIME" property="latestBackupTime" jdbcType="TIMESTAMP" />
    <result column="LATEST_ACTIVATOR" property="latestActivator" jdbcType="VARCHAR" />
    <result column="USE_STATUS" property="useStatus" jdbcType="BIT" />
  </resultMap>
  <resultMap id="DetailResultMap" type="info.zznet.znms.web.module.system.bean.DetailConfigBackupRecord" >
    <id column="ID" property="id" jdbcType="VARCHAR" />
    <result column="HOST_UUID" property="hostUuid" jdbcType="VARCHAR" />
    <result column="HOST_NAME" property="hostName" jdbcType="VARCHAR" />
    <result column="HOST_IP" property="hostIp" jdbcType="VARCHAR" />
    <result column="BACKUP_PATH" property="backupPath" jdbcType="VARCHAR" />
    <result column="FILE_NAME" property="fileName" jdbcType="VARCHAR" />
    <result column="BACKUP_TIME" property="backupTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    ID, HOST_UUID, BACKUP_TIME, ACTIVATOR, FILE_NAME, SUCCESS
  </sql>
  <sql id="Blob_Column_List" >
    DEBUG_INFO
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from CONFIG_BACKUP_RECORD
    where ID = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from CONFIG_BACKUP_RECORD
    where ID = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="info.zznet.znms.base.entity.ConfigBackupRecord" >
    insert into CONFIG_BACKUP_RECORD (ID, HOST_UUID, BACKUP_TIME, 
      ACTIVATOR, FILE_NAME, DEBUG_INFO, SUCCESS
      )
    values (#{id,jdbcType=VARCHAR}, #{hostUuid,jdbcType=VARCHAR}, #{backupTime,jdbcType=TIMESTAMP}, 
      #{activator,jdbcType=VARCHAR}, #{fileName,jdbcType=VARCHAR}, #{debugInfo,jdbcType=LONGVARCHAR},
      #{success,jdbcType=BIT}
      )
  </insert>
  <select id="findByHost" resultMap="BaseResultMap">
  	select <include refid="Base_Column_List" /> from CONFIG_BACKUP_RECORD
  	where HOST_UUID = #{hostUuid,jdbcType=VARCHAR}
  	order by BACKUP_TIME desc
  </select>
  
  <select id="findLatestSuccess" resultMap="BaseResultMap">
  	select <include refid="Base_Column_List" /> from CONFIG_BACKUP_RECORD
  	where HOST_UUID = #{hostUuid,jdbcType=VARCHAR}
  	and SUCCESS = 1
  	order by BACKUP_TIME desc limit 1
  </select>

	<select id="findPagedDataForDevice" resultMap="GroupedResultMap">
		select 
			a.*, 
			(select count(ID) from CONFIG_BACKUP_RECORD where HOST_UUID = a.HOST_UUID) as RECORD_COUNT, 
			b.ACTIVATOR as LATEST_ACTIVATOR, 
			b.BACKUP_TIME as LATEST_BACKUP_TIME
		from 
			(select 
				t1.HOST_UUID, t2.HOST_NAME, t2.HOST_IP, t1.USE_STATUS, t1.CONTENT 
			from 
				BACKUP_CONFIGURATION_DEVICE t1, `HOST` t2 
			where
			t1.HOST_UUID = t2.ID
			<if test="hostUuid != null and hostUuid != ''">
				and t1.HOST_UUID = #{hostUuid}
			</if>
			) a
		left join 
			(select 
				x.HOST_UUID, x.ACTIVATOR, x.BACKUP_TIME
			from
				CONFIG_BACKUP_RECORD x,
				(select 
					MAX(BACKUP_TIME) as BACKUP_TIME, HOST_UUID 
				from 
					CONFIG_BACKUP_RECORD 
				group by 
					HOST_UUID) y 
			where
				x.BACKUP_TIME=y.BACKUP_TIME and x.HOST_UUID = y.HOST_UUID) b 
		on
			a.HOST_UUID = b.HOST_UUID
		order by 
			HOST_UUID
		limit #{pager.limit} offset #{pager.offset} 
	</select>
	<select id="getRecordCountForDevice" resultType="java.lang.Long">
		select
			count(HOST_UUID)
		from
			BACKUP_CONFIGURATION_DEVICE
		<if test="hostUuid != null and hostUuid != ''">
		where
			t1.HOST_UUID = #{hostUuid}
		</if>
	</select>
	
	<select id="findPagedData" resultMap="DetailResultMap">
		select 
			t1.ID, 
			t1.HOST_UUID, 
			t3.HOST_NAME, 
			t3.HOST_IP, 
			t2.CONTENT as BACKUP_PATH, 
			t1.FILE_NAME, 
			t1.BACKUP_TIME 
		from 
			CONFIG_BACKUP_RECORD t1, 
			BACKUP_CONFIGURATION_DEVICE t2, 
			`HOST` t3 
		where 
			t1.HOST_UUID = t2.HOST_UUID 
			and t2.HOST_UUID = t3.ID
			and SUCCESS = 1
			<if test="hostUuid != null and hostUuid !=''">
				and t1.HOST_UUID = #{hostUuid}
			</if>
		order by BACKUP_TIME desc
		limit #{pager.limit} offset #{pager.offset} 
	</select>
	
	<select id="getRecordCount" resultType="java.lang.Long">
		select count(ID) from CONFIG_BACKUP_RECORD
		where SUCCESS = 1
		<if test="hostUuid != null and hostUuid !=''">
			and HOST_UUID = #{hostUuid}
		</if>
	</select>
	
	<select id="findById" resultMap="DetailResultMap">
		select 
			t1.ID, 
			t1.HOST_UUID, 
			t3.HOST_NAME, 
			t3.HOST_IP, 
			t2.CONTENT as BACKUP_PATH, 
			t1.FILE_NAME, 
			t1.BACKUP_TIME 
		from 
			CONFIG_BACKUP_RECORD t1, 
			BACKUP_CONFIGURATION_DEVICE t2, 
			`HOST` t3 
		where 
			t1.ID = #{id}
			and t1.HOST_UUID = t2.HOST_UUID 
			and t2.HOST_UUID = t3.ID
	</select>
</mapper>